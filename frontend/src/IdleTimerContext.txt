// import React, { createContext, useState, useEffect, useContext } from 'react';

// const IdleTimerContext = createContext();

// export const IdleTimerProvider = ({ children }) => {
//   const [timer, setTimer] = useState(null);

//   const resetTimer = () => {
//     if (timer) {
//       clearTimeout(timer);
//     }

//     const newTimer = setTimeout(() => {
//       window.location.href = '/'; // Redirect to landing page
//     }, 10000); // 10 seconds

//     setTimer(newTimer);
//   };

//   useEffect(() => {
//     const resetHandler = () => resetTimer();

//     // Attach the reset handler to document events
//     document.addEventListener('mousemove', resetHandler);
//     document.addEventListener('mousedown', resetHandler);
//     document.addEventListener('keydown', resetHandler);
//     document.addEventListener('touchstart', resetHandler);

//     // Cleanup event listeners on component unmount
//     return () => {
//       document.removeEventListener('mousemove', resetHandler);
//       document.removeEventListener('mousedown', resetHandler);
//       document.removeEventListener('keydown', resetHandler);
//       document.removeEventListener('touchstart', resetHandler);

//       if (timer) {
//         clearTimeout(timer);
//       }
//     };
//   }, []);

//   return (
//     <IdleTimerContext.Provider value={{ resetTimer }}>
//       {children}
//     </IdleTimerContext.Provider>
//   );
// };

// export const useIdleTimer = () => {
//   const context = useContext(IdleTimerContext);
//   if (!context) {
//     throw new Error('useIdleTimer must be used within an IdleTimerProvider');
//   }
//   return context;
// };
